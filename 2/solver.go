/*
 * Description: this script will solve the string encryption for flare-on7 challenge 2
 *
 * Author:      Nick Taylor
*/


package main

import (
    "fmt"
    //"strings"
)


// code implements a simple xor cipher
func main() {
    // key found embedded in code
    // little endian
//    key_stream := []byte{0x39,0x12,0x1e,0x73,0x33,0x08,0x11,0x42,0x1b,0x0c,0x23,0x3e,0x19,0x3b,0x1b,0x34,0x38,0x0e,0x02,0x3b,0x54,0x00,0x00,0x00,0x00,0x00,0x56,0x58,0x1a,0x29,0x79,0x3a,0x15,0x14,0x34,0x58,0x63,0x21,0x24,0x0e,0x34,0x20,0x09,0x08,0x16,0x36,0x03,0x05,0x5d,0x04,0x1b,0x17,0x3e,0x50,0x64,0x0d,0x2a,0x2d,0x42,0x0f,0x32,0x11,0x74,0x2c,0x44,0x66,0x08,0x24,0x23,0x16,0x02,0x1a,0x0a,0x1e,0x0a,0x04,0x0e,0x3f,0x64,0x49,0x23,0x23,0x33,0x2c}
    // big endian
//    key_stream := []byte{0x73,0x1e,0x12,0x39,0x42,0x11,0x08,0x33,0x3e,0x23,0x0c,0x1b,0x34,0x1b,0x3b,0x19,0x3b,0x02,0x0e,0x38,0x00,0x00,0x00,0x54,0x58,0x56,0x00,0x00,0x3a,0x79,0x29,0x1a,0x58,0x34,0x14,0x15,0x0e,0x24,0x21,0x63,0x08,0x09,0x20,0x34,0x05,0x03,0x36,0x16,0x17,0x1b,0x04,0x5d,0x0d,0x64,0x50,0x3e,0x0f,0x42,0x2d,0x2a,0x2c,0x74,0x11,0x32,0x24,0x08,0x66,0x44,0x1a,0x02,0x16,0x23,0x04,0x0a,0x1e,0x0a,0x49,0x64,0x3f,0x0e,0x2c,0x33,0x23,0x23}
    // mini little endian key
//    key_stream := []byte{0x38,0x0e,0x02,0x3b,0x19,0x3b,0x1b,0x34,0x1b,0x0c,0x23,0x3e,0x33,0x08,0x11,0x42,0x39,0x12,0x1e,0x73}
    // second mini little endian key
    key_stream := []byte{0x23,0x23,0x33,0x2c,0x03,0x3f,0x64,0x49,0x0a,0x1e,0x0a,0x04,0x23,0x16,0x02,0x1a,0x44,0x66,0x08,0x24,0x32,0x11,0x74,0x2c,0x2a,0x3d,0x42,0x0f,0x3e,0x50,0x64,0x0d,0x5d,0x04,0x1b,0x17,0x16,0x36,0x03,0x05,0x34,0x20,0x09,0x08,0x63,0x21,0x24,0x0e,0x15,0x14,0x34,0x58,0x1a,0x29,0x79,0x3a,0x00,0x00,0x56,0x58,0x00,0x00,0x00}
    key_length := len(key_stream)

    // extracted strings
    string1 := []byte("nPTnaGLkIqdcQwvieFQKGcTGOTbfMjDNmvibfBDdFBhoPaBbtfQuuGWYomtqTFqvBSKdUMmciqKSGZaosWCSoZlcIlyQpOwkcAgw")
    string1_len := len(string1)
    string2 := []byte("KglPFOsQDxBPXmclOpmsdLDEPMRWbMDzwhDGOyqAkVMRvnBeIkpZIhFznwVylfjrkqprBPAdPuaiVoVugQAlyOQQtxBNsTdPZgDH")
    string2_len := len(string2)

    cracked_string1 := make([]byte,string1_len)
    cracked_string2 := make([]byte,string2_len)
    for i := 0; i < string1_len ; i ++ {
        cracked_string1[i] = string1[i] ^ key_stream[i % key_length]
    }

    for i := 0; i < string2_len ; i ++ {
        cracked_string2[i] = string2[i] ^ key_stream[i % key_length]
    }

    fmt.Println(string(cracked_string1[:]))
    fmt.Println(string(cracked_string2[:]))
    fmt.Println("done")
}
